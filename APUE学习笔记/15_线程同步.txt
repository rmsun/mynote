Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-20T15:56:42+08:00

====== 15 线程同步 ======
Created Thursday 20 October 2011

By:             潘云登
Date:          2009-8-20
Email:         intrepyd@gmail.com
Homepage: http://blog.csdn.net/intrepyd
Copyright: 该文章版权由潘云登所有。可在非商业目的下任意传播和复制。
对于商业目的下对本文的任何行为需经作者同意。

写在前面
1.          本文内容对应《UNIX环境高级编程》(第2版)》第11章。
2.          总结了线程同步的三种方法：互斥量、读写锁以及条件变量。
3.          希望本文对您有所帮助，也欢迎您给我提意见和建议。
线程同步是一个老话题了。当多个控制线程共享相同的内存时，需要确保每个线程看到一致的数据视图。APUE介绍的线程同步方式有：

互斥量
互斥量（mutex）从本质上说是一把锁，在访问共享资源前对互斥量进行加锁，在访问完成后释放互斥量上的锁。互斥变量用pthread_mutex_t数据类型来表示，在使用前必须对其进行初始化。对于静态分配的互斥量，可以把它设置为常量PTHREAD_MUTEX_INITIALIZER。如果动态地分配互斥量，可以通过调用pthread_mutex_init函数进行初始化，并且在释放内存前需要调用pthread_mutex_destroy。当参数attr置为NULL时，使用默认的属性初始化互斥量。
#include <pthread.h>
int pthread_mutex_init(pthread_mutex_t *restrict mutex,
                       const pthread_mutexattr_t *restrict attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
                                         All return: 0 if OK, error number on failure
对互斥量加锁需要调用pthread_mutex_lock，如果互斥量已经上锁，调用线程将阻塞直到互斥量被解锁。对互斥量解锁，需要调用pthread_mutex_unlock。如果线程不希望被阻塞，它可以使用pthread_mutex_trylock尝试对互斥量进行加锁。如果调用pthread_mutex_trylock时互斥量处于未锁住状态，那么pthread_mutex_trylock将锁住互斥量，不会出现阻塞并返回0，否则pthread_mutex_trylock就会失败，不能锁住互斥量，而返回EBUSY。
如果线程试图对同一个互斥量加锁两次，那么它自身就会陷入死锁状态。可以通过小心地控制互斥量加锁的顺序来避免死锁的发生。只有一个线程试图以与另一个线程相反的顺序锁住互斥量时，才可能出现死锁。如果无法控制互斥量加锁的顺序，可以在试图加锁时，先释放占有的锁，然后过段时间再试。

读写锁
读写锁与互斥量类似，不过读写锁允许更高的并行性。读写锁可以有三种状态：读模式下加锁状态，写模式下加锁状态，以及不加锁状态。一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁。因此，读写锁也叫做共享-独占锁。读写锁非常适用于对数据结构读的次数远大于写的情况。
         与互斥量一样，读写锁在使用之前必须初始化，在释放它们底层的内存前必须销毁。这通过pthread_rwlock_inti和pthread_rwlock_destroy函数完成。如果希望读写锁有默认的属性，可以传一个空指针给attr。要在读模式下锁定读写锁，需要调用pthread_rwlock_rdlock；要在写模式下锁定读写锁，需要调用pthread_rwlock_wrlock。不管以何种方式锁住读写锁，都可以调用pthread_rwlock_unlock进行解锁。如果希望线程不被阻塞，可以调用pthread_rwlock_tryrdlock和pthread_rwlock_trywrlock函数尝试对读写锁进行加锁。
#include <pthread.h>
int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,
                        const pthread_rwlockattr_t *restrict attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
                                         All return: 0 if OK, error number on failure

条件变量
条件变量与互斥量一起使用时，允许线程以无竞争的方式等待特定的条件发生。条件本身是由互斥量保护的，线程在改变条件前必须首先锁住互斥量，且只有在锁住互斥量以后才能计算条件。条件变量使用之前必须首先进行初始化，pthread_cond_t数据类型代表的条件变量可以用两种方式初始化。可以把常量PTHREAD_COND_INITIALIZER赋给静态分配的条件变量，但是如果条件变量是动态分配的，可以使用pthread_cond_init函数进行初始化。在释放底层的内存空间前，可以使用pthread_mutex_destroy函数对条件变量进行销毁。除非需要创建一个非默认属性的条件变量，否则pthread_cond_init函数的attr参数可以设置为NULL。
#include <pthread.h>
int pthread_cond_init(pthread_cond_t *restrict cond,
                      pthread_condattr_t *restrict attr);
int pthread_cond_destroy(pthread_cond_t *cond);                                        
All return: 0 if OK, error number on failure
使用pthread_cond_wait等待条件变为真，如果在给定时间内条件不能满足，那么会生成一个代表出错码的返回值。调用者需要把锁住的互斥量传给pthread_cond_wait对条件进行保护。函数把调用线程放到等待条件的线程列表上，然后对互斥量解锁，这两个操作是原子操作。当pthread_cond_wait返回时，互斥量再次被锁住。
#include <pthread.h>
int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
int pthread_cond_timedwait(pthread_cond_t *restrict cond,
                           pthread_mutex_t *restrict mutex,
                           const struct timespec *restrict timeout);                        
All return: 0 if OK, error number on failure
pthread_cond_timedwait函数的工作方式与pthread_cond_wait函数相似。timeout值指定了等待的时间，它通过timespec结构指定。时间值用秒数或者分秒数表示，分秒数的单位是纳秒。时间值是一个绝对数而不是相对数。可以使用gettimeofday获取用timeval结构表示的当前时间，然后把这个时间加上要等待的时间转换成timespec结构。
struct timespec {
        time_t tv_sec;   /* seconds */
        long   tv_nsec;  /* nanoseconds */
};
 
void maketimeout(struct timespec *tsp, long minutes)
{
        struct timeval now;
        /* get the current time */
        gettimeofday(&now);
        tsp->tv_sec = now.tv_sec;
        tsp->tv_nsec = now.tv_usec * 1000; /* usec to nsec */
        /* add the offset to get timeout value */
        tsp->tv_sec += minutes * 60;
}
         如果时间值到了但是条件还没有出现，pthread_cond_timedwait将重新获取互斥量，然后返回错误ETIMEDOUT。从pthread_cond_wait或者pthread_cond_timedwait调用成功返回时，线程需要重新计算条件，因为其它线程可能已经在运行并改变了条件。
pthread_cond_signal函数将唤醒等待该条件的某个线程，而pthread_cond_broadcast函数将唤醒等待该条件的所有线程。必须注意一定要在改变条件状态以后再唤醒等待线程。
#include <pthread.h>
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_broadcast(pthread_cond_t *cond);                    
All return: 0 if OK, error number on failure
         使用范例如下：
#include <pthread.h>
 
struct msg {
    struct msg *m_next;
    /* ... more stuff here ... */
};
struct msg *workq;
pthread_cond_t qready = PTHREAD_COND_INITIALIZER;   /*初始化条件变量*/
pthread_mutex_t qlock = PTHREAD_MUTEX_INITIALIZER;  /*初始化互斥量*/
 
void process_msg(void)
{
    struct msg *mp;
 
    for (;;) {
        pthread_mutex_lock(&qlock);     /*条件本身由互斥量保护*/
        while (workq == NULL)           /*wait返回后要重新检查条件*/
            pthread_cond_wait(&qready, &qlock);  /*wait期间释放互斥量，返回时再次锁住*/
        mp = workq;
        workq = mp->m_next;
        pthread_mutex_unlock(&qlock);   /*真正释放互斥量*/
        /* now process the message mp */
    }
}
 
void enqueue_msg(struct msg *mp)
{
    pthread_mutex_lock(&qlock);       /*修改条件前锁住互斥量*/
    mp->m_next = workq;
    workq = mp;
    pthread_mutex_unlock(&qlock);
pthread_cond_signal(&qready);     /*唤醒等待线程时不需要占有互斥量*/
/*如果希望在wait返回时不用再检查条件，
就需要在唤醒时占有互斥量*/
}
